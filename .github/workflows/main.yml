name: GitHub Actions CI/CD

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

jobs:
  backend_tests:
    name: Backend app tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_HOST: localhost
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    strategy:
      matrix:
        python-version: [ 3.9, 3.11, 3.12, 3.13 ]
    steps:
      - name: Checkout the code in a repository
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
      - name: Run tests and linting
        run: |
          cd backend
          python manage.py migrate
          python -m flake8
          python -m pytest
  build_and_push_backend_to_dockerhub:
    name: Build backend`s image and push to Docker Hub
    runs-on: ubuntu-latest
    needs: backend_tests
    steps:
      - name: Checkout the code in a repository
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push backend`s image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/food_backend:latest
  frontend_tests:
    name: Frontend app tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code in a repository
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: |
          cd frontend/
          npm install
      - name: Test Frontend
        continue-on-error: true
        run: |
          cd frontend/
          npm run test
  build_and_push_frontend_to_dockerhub:
    name: Build frontend`s image and push to Docker Hub
    runs-on: ubuntu-latest
    needs: frontend_tests
    steps:
      - name: Checkout the code in a repository
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push frontend`s image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/food_frontend:latest
  deploy:
    name: Deploy the app to the server
    runs-on: ubuntu-latest
    needs:
      - build_and_push_backend_to_dockerhub
      - build_and_push_frontend_to_dockerhub
    steps:
      - name: Checkout the code in a repository
        uses: actions/checkout@v3
      - name: Copy docker-compose.production.yml to the server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: ./infra/docker-compose.production.yml
          target: ${{ secrets.DEPLOY_PATH }}
      - name: Copy nginx.conf file to the server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: ./infra/nginx.conf
          target: ${{ secrets.DEPLOY_PATH }}
      - name: Execute the commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd ${{ secrets.DEPLOY_PATH }}
            cd infra/
            sudo docker compose -f docker-compose.production.yml pull
            sudo docker compose -f docker-compose.production.yml down
            sudo docker compose -f docker-compose.production.yml up -d
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --noinput
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py fill_db
  send_message:
    name: Send message that application has been deployed
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Send message via Telegram API
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            Коммит от ${{ github.actor }}:
            "${{ github.event.commits[0].message }}" успешно прошел CI/CD! ✅
            
            Ссылка на изменения: https://github.com/${{ github.repository }}/commit/${{github.sha}}
